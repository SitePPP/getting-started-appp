name: build-docker
on:
  [workflow_dispatch, push]

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: VÃ©rification des tags existants
        run: git tag -l

      - name: Get next version
        uses: reecetech/version-increment@2024.10.1
        id: version
        with:
          use_api: true

      - run: echo "ðŸ’¡ The ${{ github.repository }} repository has been cloned to the runner."
      - run: ls

      - name: Build the docker file
        run: |
          docker build . -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: https://index.docker.io/v1/
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push the Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-west-3
          aws configure set output json

      - name: Check instance state
        id: instance_state
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ secrets.AWS_INSTANCE_NAME }}" --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "instance_state=not_found" >> $GITHUB_OUTPUT
          else
            INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].State.Name" --output text | tr -d '\n')
            echo "instance_state=$INSTANCE_STATE" >> $GITHUB_OUTPUT
          fi

      - name: Deploy on AWS EC2 (create instance if needed)
        if: steps.instance_state.outputs.instance_state == 'not_found' || steps.instance_state.outputs.instance_state == 'stopped'
        run: |
          echo "ðŸš€ Creating a new EC2 instance..."
          aws ec2 run-instances \
            --image-id ${{ secrets.AWS_AMI }} \
            --instance-type t2.micro \
            --key-name ${{ secrets.AWS_KEY_PAIR }} \
            --security-groups launch-wizard-1 \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${{ secrets.AWS_INSTANCE_NAME }} }]" \
            --user-data '#!/bin/bash
              sudo yum update -y
              sudo yum install -y docker
              sudo usermod -aG docker ec2-user
              newgrp docker
              sudo systemctl enable docker
              sudo systemctl start docker
              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}
              docker run -d --name mon_container --restart=always -p 80:80 \
                -e MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
                -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
                -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
                -e MYSQL_DB=${{ secrets.MYSQL_DB }} \
                ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}'

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 400 ec2_key.pem

      - name: Update container on existing EC2 instance
        if: steps.instance_state.outputs.instance_state == 'running'
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ secrets.AWS_INSTANCE_NAME }}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          echo "Updating container on instance with IP: $PUBLIC_IP"
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@$PUBLIC_IP << 'EOF'
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}
            docker stop mon_container || true
            docker rm mon_container || true
            docker run -d --name mon_container --restart=always -p 80:80 \
              -e MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
              -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
              -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -e MYSQL_DB=${{ secrets.MYSQL_DB }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}
          EOF

      - name: Get Instance Public IP
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ secrets.AWS_INSTANCE_NAME }}" --query "Reservations[*].Instances[*].InstanceId" --output text)
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          echo "Server is running at: http://$PUBLIC_IP"
