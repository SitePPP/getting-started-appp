name: build-docker
on:
  workflow_dispatch
jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: VÃ©rification des tags existants
        run: git tag -l

      - name: Get next version
        uses: reecetech/version-increment@2024.10.1
        id: version
        with:
          use_api: true

      - run: echo "ðŸ’¡ The ${{ github.repository }} repository has been cloned to the runner."
      - run: ls

      - name: Build the docker file
        run: docker build . -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: https://index.docker.io/v1/
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push the Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-west-3
          aws configure set output json
      - name: Deploy on AWS EC2
        run: |
          # VÃ©rifier si une instance existe dÃ©jÃ  avec le nom donnÃ©
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ secrets.AWS_INSTANCE_NAME }}" --query "Reservations[*].Instances[*].InstanceId" --output text)
          
          # Si l'instance existe, rÃ©cupÃ©rer son Ã©tat
          if [ ! -z "$INSTANCE_ID" ]; then
            INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].State.Name" --output text)
          else
            INSTANCE_STATE="not_found"
          fi

          echo "Current instance state: $INSTANCE_STATE"

          # Si l'instance n'existe pas ou est arrÃªtÃ©e, la (re)lancer
          if [ "$INSTANCE_STATE" == "not_found" ] || [ "$INSTANCE_STATE" == "stopped" ]; then
            echo "ðŸš€ Creating a new EC2 instance..."
            aws ec2 run-instances \
              --image-id ${{ secrets.AWS_AMI }} \
              --instance-type t2.micro \
              --key-name ${{ secrets.AWS_KEY_PAIR }} \
              --security-groups launch-wizard-1 \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=${{ secrets.AWS_INSTANCE_NAME }} }]' \
              --user-data '#!/bin/bash
              sudo yum update -y
              sudo yum install -y docker
              sudo usermod -aG docker ec2-user
              newgrp docker
              sudo systemctl enable docker
              sudo systemctl start docker
              docker pull ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}
              docker run -d --name mon_container --restart=always -p 80:80 -e MYSQL_HOST=${{ secrets.MYSQL_HOST }}  -e MYSQL_USER=${{ secrets.MYSQL_USER }} -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} -e MYSQL_DB=${{ secrets.MYSQL_DB }} ${{ secrets.DOCKERHUB_USERNAME }}/getting-started-appp:${{ steps.version.outputs.version }}'
          else
            echo "âœ… Instance already running, skipping creation"
          fi

      - name: Get Instance Public IP
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ secrets.AWS_INSTANCE_NAME }}" --query "Reservations[*].Instances[*].InstanceId" --output text)
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          echo "Server is running at: http://$PUBLIC_IP"
